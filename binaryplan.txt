                try:
                    xpercentage = (((xt - vc.xmin) * 100) / (vc.xmax - vc.xmin)) / 100 #TESTING NEEDED AM UNSURE IF VALUES NEED TO BE FLIPPED
                    ypercentage = (((yt - vc.ymin) * 100) / (vc.ymax - vc.ymin)) / 100
                    if LBlink >= 0.125:
                      LBlink1 = false
                      LBlink2 = false
                      LBlink4 = false
                      elif LBlink =< 0.125 > 0.25
                    if RBlink >= 0.125: 
                
                    client.send_message("/Avatar/LBlink1", LBlink1)
                    client.send_message("/Avatar/LBlink2", LBlink2)
                    client.send_message("/Avatar/LBlink4", LBlink4)
                    client.send_message("/Avatar/RBlink1", RBlink1)
                    client.send_message("/Avatar/RBlink2", RBlink2)
                    client.send_message("/Avatar/RBlink4", RBlink4)
                    print('L: ', LBlink, ' R: ', RBlink)

                
                if xt > vc.xmax:
                    if vc.xmax != 0:
                        vc.xmax = xt
                
                if xt < vc.xmin:
                    if vc.xmin != 0:
                        vc.xmin = xt

                if yt > vc.ymax:
                    if vc.ymax != 0:
                        vc.ymax = yt
                
                if yt < vc.ymin:
                    if vc.ymin != 0:
                        vc.ymin = yt

                xt = x + int(w/2) 
                yt = y + int(h/2)

                
                cv2.line(threshold, (x + int(w/2), 0), (x + int(w/2), rows), (255, 0, 0), 1) #visualizes eyetracking on threshold
                cv2.line(threshold, (0, y + int(h/2)), (cols, y + int(h/2)), (255, 0, 0), 1)
                cv2.drawContours(threshold, [cnt], -1, (255, 0, 0), 3)
                cv2.rectangle(threshold, (x, y), (x + w, y + h), (255, 0, 0), 2)

                cv2.line(gray_roi, (x + int(w/2), 0), (x + int(w/2), rows), (255, 0, 0), 1) #visualizes eyetracking on greyscale 
                cv2.line(gray_roi, (0, y + int(h/2)), (cols, y + int(h/2)), (255, 0, 0), 1)
                cv2.drawContours(gray_roi, [cnt], -1, (255, 0, 0), 3)
                cv2.rectangle(gray_roi, (x, y), (x + w, y + h), (255, 0, 0), 2)
                break

        except:
            print('[ERROR] Main Loop Failure.')

        cv2.imshow("Threshold", threshold)
        cv2.imshow("GreyScale", gray_roi)
        cv2.imshow("Roi", roi)

        cv2.imshow('color', imgrgb)
        cv2.imshow('frame', img)
        cv2.waitKey(1)
        
if __name__ == '__main__':
    #'http://192.168.0.202:81/stream'
        
    try:
        OSCip="127.0.0.1" 
        OSCport=9000 #VR Chat OSC port
        client = udp_client.SimpleUDPClient(OSCip, OSCport)
    except:
        print('[ERROR] Connection to VR Chat via OSC Failed')
            
    try:
        camadd= open("cam.txt","r+")
        src = camadd.read().strip()
        camadd.close  
    except:
        addressipn = input('Enter IP Stream Address of Camera :>: ')
        writet(addressipn)
        src = addressipn.strip().lower()
    

    threaded_camera = ThreadedCamera(src)

    h = 1 #defines hight value so blink check doesnt error out
    ronce = 0
    while True:
        try:   
            if ronce == 0:  
                vc()
                ronce = 1
            threaded_camera.show_frame()
        except AttributeError:
            pass
